mode: daemonset
image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.128.0
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 256Mi
presets:
  kubernetesAttributes:
    enabled: true
  hostMetrics:
    enabled: true
  kubeletMetrics:
    enabled: true
  logsCollection:
    enabled: true
clusterRole:
  create: true
  name: "opentelemetry-collector"
  rules:
  - verbs:
    - get
    - list
    - watch
    resources: 
      - nodes
      - nodes/metrics
      - nodes/proxy
      - pods
      - namespaces
    apiGroups: 
      - ""
  - verbs:
    - get
    - list
    - watch
    resources: 
      - deployments
    apiGroups: 
      - "apps"
  - verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
    resources: 
      - leases
    apiGroups: 
      - "coordination.k8s.io"
  clusterRoleBinding:
    name: "opentelemetry-collector"
serviceAccount:
  create: true
  name: "opentelemetry-collector"
config:
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    prometheus:
      config:
        scrape_configs:
          - job_name: "k3s-pod-metrics"
            scrape_interval: 30s
            scheme: https
            metrics_path: /metrics/cadvisor
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                target_label: node
              - action: labelmap
                regex: __meta_kubernetes_pod_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
                target_label: deployment
            authorization:
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
          - job_name: "k3s-node-metrics"
            scrape_interval: 30s
            scheme: https
            metrics_path: /metrics
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                target_label: node
            authorization:
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
  processors:
    k8sattributes:
      extract:
        metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.deployment.name
      pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
    batch: {}
  exporters:
    # prometheusremotewrite:
    #   endpoint: http://local-prometheus-server.default.svc.cluster.local:80/api/v1/write
    otlphttp/prometheus:
      endpoint: http://local-prometheus-server.default.svc.cluster.local:80/api/v1/otlp
    otlphttp/loki:
      endpoint: http://local-grafana-loki.default.svc.cluster.local:3100/otlp
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
    k8s_leader_elector:
      auth_type: kubeConfig
      lease_name: opentelemetry-collector
      lease_namespace: default
  service:
    extensions: 
      - health_check
      - k8s_leader_elector
    telemetry:
      metrics:
        address: 0.0.0.0:8888
      logs:
        encoding: json
    pipelines:
      metrics:
        receivers: 
          - otlp
          - prometheus
        processors: 
          - k8sattributes
          - batch
        exporters: 
          - otlphttp/prometheus
      logs:
        receivers: 
          - otlp
        processors: 
          - k8sattributes
          - batch
        exporters: 
          - otlphttp/loki
ports:
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
